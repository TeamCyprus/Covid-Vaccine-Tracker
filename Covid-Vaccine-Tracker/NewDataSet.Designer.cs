//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Covid_Vaccine_Tracker {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private Vaccine_RecordsDataTable tableVaccine_Records;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Vaccine_Records"] != null)) {
                    base.Tables.Add(new Vaccine_RecordsDataTable(ds.Tables["Vaccine_Records"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Vaccine_RecordsDataTable Vaccine_Records {
            get {
                return this.tableVaccine_Records;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Vaccine_Records"] != null)) {
                    base.Tables.Add(new Vaccine_RecordsDataTable(ds.Tables["Vaccine_Records"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableVaccine_Records = ((Vaccine_RecordsDataTable)(base.Tables["Vaccine_Records"]));
            if ((initTable == true)) {
                if ((this.tableVaccine_Records != null)) {
                    this.tableVaccine_Records.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NewDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVaccine_Records = new Vaccine_RecordsDataTable();
            base.Tables.Add(this.tableVaccine_Records);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeVaccine_Records() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Vaccine_RecordsRowChangeEventHandler(object sender, Vaccine_RecordsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Vaccine_RecordsDataTable : global::System.Data.TypedTableBase<Vaccine_RecordsRow> {
            
            private global::System.Data.DataColumn columnExtract_Type;
            
            private global::System.Data.DataColumn columnVaccine_Event_Id;
            
            private global::System.Data.DataColumn columnAdministration_Date;
            
            private global::System.Data.DataColumn columnVaccine_Type;
            
            private global::System.Data.DataColumn columnVaccine_Product;
            
            private global::System.Data.DataColumn columnVaccine_Manufacturer;
            
            private global::System.Data.DataColumn columnLot_Number;
            
            private global::System.Data.DataColumn columnVaccine_Experation_Date;
            
            private global::System.Data.DataColumn columnVaccine_Admin_Site;
            
            private global::System.Data.DataColumn columnVaccine_Admin_Route;
            
            private global::System.Data.DataColumn columnDose_Number;
            
            private global::System.Data.DataColumn columnVaccine_Series_Complete;
            
            private global::System.Data.DataColumn columnResponsible_Organization;
            
            private global::System.Data.DataColumn columnAdministrated_Location;
            
            private global::System.Data.DataColumn columnVtcks_Pin;
            
            private global::System.Data.DataColumn columnAdministered_Loc_Type;
            
            private global::System.Data.DataColumn columnAdmin_Street_Address;
            
            private global::System.Data.DataColumn columnAdmin_City;
            
            private global::System.Data.DataColumn columnAdmin_County;
            
            private global::System.Data.DataColumn columnAdmin_State;
            
            private global::System.Data.DataColumn columnAdmin_Zip;
            
            private global::System.Data.DataColumn columnAdmin_Suffix;
            
            private global::System.Data.DataColumn columnComorbidity_Status;
            
            private global::System.Data.DataColumn columnSerology_Results;
            
            private global::System.Data.DataColumn columnPPRL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsDataTable() {
                this.TableName = "Vaccine_Records";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Vaccine_RecordsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Vaccine_RecordsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Extract_TypeColumn {
                get {
                    return this.columnExtract_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_Event_IdColumn {
                get {
                    return this.columnVaccine_Event_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Administration_DateColumn {
                get {
                    return this.columnAdministration_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_TypeColumn {
                get {
                    return this.columnVaccine_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_ProductColumn {
                get {
                    return this.columnVaccine_Product;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_ManufacturerColumn {
                get {
                    return this.columnVaccine_Manufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Lot_NumberColumn {
                get {
                    return this.columnLot_Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_Experation_DateColumn {
                get {
                    return this.columnVaccine_Experation_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_Admin_SiteColumn {
                get {
                    return this.columnVaccine_Admin_Site;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_Admin_RouteColumn {
                get {
                    return this.columnVaccine_Admin_Route;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Dose_NumberColumn {
                get {
                    return this.columnDose_Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vaccine_Series_CompleteColumn {
                get {
                    return this.columnVaccine_Series_Complete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Responsible_OrganizationColumn {
                get {
                    return this.columnResponsible_Organization;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Administrated_LocationColumn {
                get {
                    return this.columnAdministrated_Location;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Vtcks_PinColumn {
                get {
                    return this.columnVtcks_Pin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Administered_Loc_TypeColumn {
                get {
                    return this.columnAdministered_Loc_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_Street_AddressColumn {
                get {
                    return this.columnAdmin_Street_Address;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_CityColumn {
                get {
                    return this.columnAdmin_City;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_CountyColumn {
                get {
                    return this.columnAdmin_County;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_StateColumn {
                get {
                    return this.columnAdmin_State;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_ZipColumn {
                get {
                    return this.columnAdmin_Zip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Admin_SuffixColumn {
                get {
                    return this.columnAdmin_Suffix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Comorbidity_StatusColumn {
                get {
                    return this.columnComorbidity_Status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Serology_ResultsColumn {
                get {
                    return this.columnSerology_Results;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PPRLColumn {
                get {
                    return this.columnPPRL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRow this[int index] {
                get {
                    return ((Vaccine_RecordsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Vaccine_RecordsRowChangeEventHandler Vaccine_RecordsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Vaccine_RecordsRowChangeEventHandler Vaccine_RecordsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Vaccine_RecordsRowChangeEventHandler Vaccine_RecordsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Vaccine_RecordsRowChangeEventHandler Vaccine_RecordsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddVaccine_RecordsRow(Vaccine_RecordsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRow AddVaccine_RecordsRow(
                        string Extract_Type, 
                        string Vaccine_Event_Id, 
                        System.DateTime Administration_Date, 
                        string Vaccine_Type, 
                        string Vaccine_Product, 
                        string Vaccine_Manufacturer, 
                        string Lot_Number, 
                        System.DateTime Vaccine_Experation_Date, 
                        string Vaccine_Admin_Site, 
                        string Vaccine_Admin_Route, 
                        int Dose_Number, 
                        string Vaccine_Series_Complete, 
                        string Responsible_Organization, 
                        string Administrated_Location, 
                        string Vtcks_Pin, 
                        string Administered_Loc_Type, 
                        string Admin_Street_Address, 
                        string Admin_City, 
                        string Admin_County, 
                        string Admin_State, 
                        string Admin_Zip, 
                        string Admin_Suffix, 
                        string Comorbidity_Status, 
                        string Serology_Results, 
                        string PPRL) {
                Vaccine_RecordsRow rowVaccine_RecordsRow = ((Vaccine_RecordsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Extract_Type,
                        Vaccine_Event_Id,
                        Administration_Date,
                        Vaccine_Type,
                        Vaccine_Product,
                        Vaccine_Manufacturer,
                        Lot_Number,
                        Vaccine_Experation_Date,
                        Vaccine_Admin_Site,
                        Vaccine_Admin_Route,
                        Dose_Number,
                        Vaccine_Series_Complete,
                        Responsible_Organization,
                        Administrated_Location,
                        Vtcks_Pin,
                        Administered_Loc_Type,
                        Admin_Street_Address,
                        Admin_City,
                        Admin_County,
                        Admin_State,
                        Admin_Zip,
                        Admin_Suffix,
                        Comorbidity_Status,
                        Serology_Results,
                        PPRL};
                rowVaccine_RecordsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVaccine_RecordsRow);
                return rowVaccine_RecordsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRow FindByVaccine_Event_Id(string Vaccine_Event_Id) {
                return ((Vaccine_RecordsRow)(this.Rows.Find(new object[] {
                            Vaccine_Event_Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Vaccine_RecordsDataTable cln = ((Vaccine_RecordsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Vaccine_RecordsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnExtract_Type = base.Columns["Extract_Type"];
                this.columnVaccine_Event_Id = base.Columns["Vaccine_Event_Id"];
                this.columnAdministration_Date = base.Columns["Administration_Date"];
                this.columnVaccine_Type = base.Columns["Vaccine_Type"];
                this.columnVaccine_Product = base.Columns["Vaccine_Product"];
                this.columnVaccine_Manufacturer = base.Columns["Vaccine_Manufacturer"];
                this.columnLot_Number = base.Columns["Lot_Number"];
                this.columnVaccine_Experation_Date = base.Columns["Vaccine_Experation_Date"];
                this.columnVaccine_Admin_Site = base.Columns["Vaccine_Admin_Site"];
                this.columnVaccine_Admin_Route = base.Columns["Vaccine_Admin_Route"];
                this.columnDose_Number = base.Columns["Dose_Number"];
                this.columnVaccine_Series_Complete = base.Columns["Vaccine_Series_Complete"];
                this.columnResponsible_Organization = base.Columns["Responsible_Organization"];
                this.columnAdministrated_Location = base.Columns["Administrated_Location"];
                this.columnVtcks_Pin = base.Columns["Vtcks_Pin"];
                this.columnAdministered_Loc_Type = base.Columns["Administered_Loc_Type"];
                this.columnAdmin_Street_Address = base.Columns["Admin_Street_Address"];
                this.columnAdmin_City = base.Columns["Admin_City"];
                this.columnAdmin_County = base.Columns["Admin_County"];
                this.columnAdmin_State = base.Columns["Admin_State"];
                this.columnAdmin_Zip = base.Columns["Admin_Zip"];
                this.columnAdmin_Suffix = base.Columns["Admin_Suffix"];
                this.columnComorbidity_Status = base.Columns["Comorbidity_Status"];
                this.columnSerology_Results = base.Columns["Serology_Results"];
                this.columnPPRL = base.Columns["PPRL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnExtract_Type = new global::System.Data.DataColumn("Extract_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtract_Type);
                this.columnVaccine_Event_Id = new global::System.Data.DataColumn("Vaccine_Event_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Event_Id);
                this.columnAdministration_Date = new global::System.Data.DataColumn("Administration_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministration_Date);
                this.columnVaccine_Type = new global::System.Data.DataColumn("Vaccine_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Type);
                this.columnVaccine_Product = new global::System.Data.DataColumn("Vaccine_Product", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Product);
                this.columnVaccine_Manufacturer = new global::System.Data.DataColumn("Vaccine_Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Manufacturer);
                this.columnLot_Number = new global::System.Data.DataColumn("Lot_Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLot_Number);
                this.columnVaccine_Experation_Date = new global::System.Data.DataColumn("Vaccine_Experation_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Experation_Date);
                this.columnVaccine_Admin_Site = new global::System.Data.DataColumn("Vaccine_Admin_Site", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Admin_Site);
                this.columnVaccine_Admin_Route = new global::System.Data.DataColumn("Vaccine_Admin_Route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Admin_Route);
                this.columnDose_Number = new global::System.Data.DataColumn("Dose_Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDose_Number);
                this.columnVaccine_Series_Complete = new global::System.Data.DataColumn("Vaccine_Series_Complete", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVaccine_Series_Complete);
                this.columnResponsible_Organization = new global::System.Data.DataColumn("Responsible_Organization", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsible_Organization);
                this.columnAdministrated_Location = new global::System.Data.DataColumn("Administrated_Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministrated_Location);
                this.columnVtcks_Pin = new global::System.Data.DataColumn("Vtcks_Pin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVtcks_Pin);
                this.columnAdministered_Loc_Type = new global::System.Data.DataColumn("Administered_Loc_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministered_Loc_Type);
                this.columnAdmin_Street_Address = new global::System.Data.DataColumn("Admin_Street_Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Street_Address);
                this.columnAdmin_City = new global::System.Data.DataColumn("Admin_City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_City);
                this.columnAdmin_County = new global::System.Data.DataColumn("Admin_County", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_County);
                this.columnAdmin_State = new global::System.Data.DataColumn("Admin_State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_State);
                this.columnAdmin_Zip = new global::System.Data.DataColumn("Admin_Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Zip);
                this.columnAdmin_Suffix = new global::System.Data.DataColumn("Admin_Suffix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdmin_Suffix);
                this.columnComorbidity_Status = new global::System.Data.DataColumn("Comorbidity_Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComorbidity_Status);
                this.columnSerology_Results = new global::System.Data.DataColumn("Serology_Results", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerology_Results);
                this.columnPPRL = new global::System.Data.DataColumn("PPRL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPRL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVaccine_Event_Id}, true));
                this.columnExtract_Type.AllowDBNull = false;
                this.columnExtract_Type.MaxLength = 15;
                this.columnVaccine_Event_Id.AllowDBNull = false;
                this.columnVaccine_Event_Id.Unique = true;
                this.columnVaccine_Event_Id.MaxLength = 10;
                this.columnAdministration_Date.AllowDBNull = false;
                this.columnVaccine_Type.AllowDBNull = false;
                this.columnVaccine_Type.MaxLength = 150;
                this.columnVaccine_Product.AllowDBNull = false;
                this.columnVaccine_Product.MaxLength = 75;
                this.columnVaccine_Manufacturer.AllowDBNull = false;
                this.columnVaccine_Manufacturer.MaxLength = 35;
                this.columnLot_Number.AllowDBNull = false;
                this.columnLot_Number.MaxLength = 10;
                this.columnVaccine_Experation_Date.AllowDBNull = false;
                this.columnVaccine_Admin_Site.AllowDBNull = false;
                this.columnVaccine_Admin_Site.MaxLength = 50;
                this.columnVaccine_Admin_Route.AllowDBNull = false;
                this.columnVaccine_Admin_Route.MaxLength = 35;
                this.columnDose_Number.AllowDBNull = false;
                this.columnVaccine_Series_Complete.AllowDBNull = false;
                this.columnVaccine_Series_Complete.MaxLength = 7;
                this.columnResponsible_Organization.AllowDBNull = false;
                this.columnResponsible_Organization.MaxLength = 100;
                this.columnAdministrated_Location.AllowDBNull = false;
                this.columnAdministrated_Location.MaxLength = 35;
                this.columnVtcks_Pin.AllowDBNull = false;
                this.columnVtcks_Pin.MaxLength = 6;
                this.columnAdministered_Loc_Type.AllowDBNull = false;
                this.columnAdministered_Loc_Type.MaxLength = 35;
                this.columnAdmin_Street_Address.AllowDBNull = false;
                this.columnAdmin_Street_Address.MaxLength = 100;
                this.columnAdmin_City.AllowDBNull = false;
                this.columnAdmin_City.MaxLength = 100;
                this.columnAdmin_County.AllowDBNull = false;
                this.columnAdmin_County.MaxLength = 100;
                this.columnAdmin_State.AllowDBNull = false;
                this.columnAdmin_State.MaxLength = 50;
                this.columnAdmin_Zip.AllowDBNull = false;
                this.columnAdmin_Zip.MaxLength = 5;
                this.columnAdmin_Suffix.AllowDBNull = false;
                this.columnAdmin_Suffix.MaxLength = 3;
                this.columnComorbidity_Status.AllowDBNull = false;
                this.columnComorbidity_Status.MaxLength = 7;
                this.columnSerology_Results.AllowDBNull = false;
                this.columnSerology_Results.MaxLength = 7;
                this.columnPPRL.AllowDBNull = false;
                this.columnPPRL.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRow NewVaccine_RecordsRow() {
                return ((Vaccine_RecordsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Vaccine_RecordsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Vaccine_RecordsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Vaccine_RecordsRowChanged != null)) {
                    this.Vaccine_RecordsRowChanged(this, new Vaccine_RecordsRowChangeEvent(((Vaccine_RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Vaccine_RecordsRowChanging != null)) {
                    this.Vaccine_RecordsRowChanging(this, new Vaccine_RecordsRowChangeEvent(((Vaccine_RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Vaccine_RecordsRowDeleted != null)) {
                    this.Vaccine_RecordsRowDeleted(this, new Vaccine_RecordsRowChangeEvent(((Vaccine_RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Vaccine_RecordsRowDeleting != null)) {
                    this.Vaccine_RecordsRowDeleting(this, new Vaccine_RecordsRowChangeEvent(((Vaccine_RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveVaccine_RecordsRow(Vaccine_RecordsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Vaccine_RecordsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Vaccine_RecordsRow : global::System.Data.DataRow {
            
            private Vaccine_RecordsDataTable tableVaccine_Records;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Vaccine_RecordsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVaccine_Records = ((Vaccine_RecordsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Extract_Type {
                get {
                    return ((string)(this[this.tableVaccine_Records.Extract_TypeColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Extract_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Event_Id {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_Event_IdColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_Event_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Administration_Date {
                get {
                    return ((global::System.DateTime)(this[this.tableVaccine_Records.Administration_DateColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Administration_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Type {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_TypeColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Product {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_ProductColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_ProductColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Manufacturer {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_ManufacturerColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Lot_Number {
                get {
                    return ((string)(this[this.tableVaccine_Records.Lot_NumberColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Lot_NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Vaccine_Experation_Date {
                get {
                    return ((global::System.DateTime)(this[this.tableVaccine_Records.Vaccine_Experation_DateColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_Experation_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Admin_Site {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_Admin_SiteColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_Admin_SiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Admin_Route {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_Admin_RouteColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_Admin_RouteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Dose_Number {
                get {
                    return ((int)(this[this.tableVaccine_Records.Dose_NumberColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Dose_NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vaccine_Series_Complete {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vaccine_Series_CompleteColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vaccine_Series_CompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Responsible_Organization {
                get {
                    return ((string)(this[this.tableVaccine_Records.Responsible_OrganizationColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Responsible_OrganizationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Administrated_Location {
                get {
                    return ((string)(this[this.tableVaccine_Records.Administrated_LocationColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Administrated_LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Vtcks_Pin {
                get {
                    return ((string)(this[this.tableVaccine_Records.Vtcks_PinColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Vtcks_PinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Administered_Loc_Type {
                get {
                    return ((string)(this[this.tableVaccine_Records.Administered_Loc_TypeColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Administered_Loc_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Street_Address {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_Street_AddressColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_Street_AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_City {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_CityColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_County {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_CountyColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_CountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_State {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_StateColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Zip {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_ZipColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Admin_Suffix {
                get {
                    return ((string)(this[this.tableVaccine_Records.Admin_SuffixColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Admin_SuffixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Comorbidity_Status {
                get {
                    return ((string)(this[this.tableVaccine_Records.Comorbidity_StatusColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Comorbidity_StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Serology_Results {
                get {
                    return ((string)(this[this.tableVaccine_Records.Serology_ResultsColumn]));
                }
                set {
                    this[this.tableVaccine_Records.Serology_ResultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string PPRL {
                get {
                    return ((string)(this[this.tableVaccine_Records.PPRLColumn]));
                }
                set {
                    this[this.tableVaccine_Records.PPRLColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Vaccine_RecordsRowChangeEvent : global::System.EventArgs {
            
            private Vaccine_RecordsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRowChangeEvent(Vaccine_RecordsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Vaccine_RecordsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Covid_Vaccine_Tracker.NewDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Vaccine_RecordsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Vaccine_RecordsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Vaccine_Records";
            tableMapping.ColumnMappings.Add("Extract_Type", "Extract_Type");
            tableMapping.ColumnMappings.Add("Vaccine_Event_Id", "Vaccine_Event_Id");
            tableMapping.ColumnMappings.Add("Administration_Date", "Administration_Date");
            tableMapping.ColumnMappings.Add("Vaccine_Type", "Vaccine_Type");
            tableMapping.ColumnMappings.Add("Vaccine_Product", "Vaccine_Product");
            tableMapping.ColumnMappings.Add("Vaccine_Manufacturer", "Vaccine_Manufacturer");
            tableMapping.ColumnMappings.Add("Lot_Number", "Lot_Number");
            tableMapping.ColumnMappings.Add("Vaccine_Experation_Date", "Vaccine_Experation_Date");
            tableMapping.ColumnMappings.Add("Vaccine_Admin_Site", "Vaccine_Admin_Site");
            tableMapping.ColumnMappings.Add("Vaccine_Admin_Route", "Vaccine_Admin_Route");
            tableMapping.ColumnMappings.Add("Dose_Number", "Dose_Number");
            tableMapping.ColumnMappings.Add("Vaccine_Series_Complete", "Vaccine_Series_Complete");
            tableMapping.ColumnMappings.Add("Responsible_Organization", "Responsible_Organization");
            tableMapping.ColumnMappings.Add("Administrated_Location", "Administrated_Location");
            tableMapping.ColumnMappings.Add("Vtcks_Pin", "Vtcks_Pin");
            tableMapping.ColumnMappings.Add("Administered_Loc_Type", "Administered_Loc_Type");
            tableMapping.ColumnMappings.Add("Admin_Street_Address", "Admin_Street_Address");
            tableMapping.ColumnMappings.Add("Admin_City", "Admin_City");
            tableMapping.ColumnMappings.Add("Admin_County", "Admin_County");
            tableMapping.ColumnMappings.Add("Admin_State", "Admin_State");
            tableMapping.ColumnMappings.Add("Admin_Zip", "Admin_Zip");
            tableMapping.ColumnMappings.Add("Admin_Suffix", "Admin_Suffix");
            tableMapping.ColumnMappings.Add("Comorbidity_Status", "Comorbidity_Status");
            tableMapping.ColumnMappings.Add("Serology_Results", "Serology_Results");
            tableMapping.ColumnMappings.Add("PPRL", "PPRL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Vaccine_Records] WHERE (([Extract_Type] = @Original_Extract_Type) AND ([Vaccine_Event_Id] = @Original_Vaccine_Event_Id) AND ([Administration_Date] = @Original_Administration_Date) AND ([Vaccine_Type] = @Original_Vaccine_Type) AND ([Vaccine_Product] = @Original_Vaccine_Product) AND ([Vaccine_Manufacturer] = @Original_Vaccine_Manufacturer) AND ([Lot_Number] = @Original_Lot_Number) AND ([Vaccine_Experation_Date] = @Original_Vaccine_Experation_Date) AND ([Vaccine_Admin_Site] = @Original_Vaccine_Admin_Site) AND ([Vaccine_Admin_Route] = @Original_Vaccine_Admin_Route) AND ([Dose_Number] = @Original_Dose_Number) AND ([Vaccine_Series_Complete] = @Original_Vaccine_Series_Complete) AND ([Responsible_Organization] = @Original_Responsible_Organization) AND ([Administrated_Location] = @Original_Administrated_Location) AND ([Vtcks_Pin] = @Original_Vtcks_Pin) AND ([Administered_Loc_Type] = @Original_Administered_Loc_Type) AND ([Admin_Street_Address] = @Original_Admin_Street_Address) AND ([Admin_City] = @Original_Admin_City) AND ([Admin_County] = @Original_Admin_County) AND ([Admin_State] = @Original_Admin_State) AND ([Admin_Zip] = @Original_Admin_Zip) AND ([Admin_Suffix] = @Original_Admin_Suffix) AND ([Comorbidity_Status] = @Original_Comorbidity_Status) AND ([Serology_Results] = @Original_Serology_Results) AND ([PPRL] = @Original_PPRL))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Extract_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Extract_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Event_Id", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Event_Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administration_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administration_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Product", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Product", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Manufacturer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Manufacturer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lot_Number", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lot_Number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Experation_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Experation_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Admin_Site", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Site", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Admin_Route", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Route", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dose_Number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dose_Number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Series_Complete", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Series_Complete", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Responsible_Organization", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Responsible_Organization", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administrated_Location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administrated_Location", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vtcks_Pin", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vtcks_Pin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administered_Loc_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administered_Loc_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Street_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Street_Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_County", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_County", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Zip", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Suffix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Suffix", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comorbidity_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comorbidity_Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Serology_Results", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Serology_Results", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PPRL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPRL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Vaccine_Records] ([Extract_Type], [Vaccine_Event_Id], [Adminis" +
                "tration_Date], [Vaccine_Type], [Vaccine_Product], [Vaccine_Manufacturer], [Lot_N" +
                "umber], [Vaccine_Experation_Date], [Vaccine_Admin_Site], [Vaccine_Admin_Route], " +
                "[Dose_Number], [Vaccine_Series_Complete], [Responsible_Organization], [Administr" +
                "ated_Location], [Vtcks_Pin], [Administered_Loc_Type], [Admin_Street_Address], [A" +
                "dmin_City], [Admin_County], [Admin_State], [Admin_Zip], [Admin_Suffix], [Comorbi" +
                "dity_Status], [Serology_Results], [PPRL]) VALUES (@Extract_Type, @Vaccine_Event_" +
                "Id, @Administration_Date, @Vaccine_Type, @Vaccine_Product, @Vaccine_Manufacturer" +
                ", @Lot_Number, @Vaccine_Experation_Date, @Vaccine_Admin_Site, @Vaccine_Admin_Rou" +
                "te, @Dose_Number, @Vaccine_Series_Complete, @Responsible_Organization, @Administ" +
                "rated_Location, @Vtcks_Pin, @Administered_Loc_Type, @Admin_Street_Address, @Admi" +
                "n_City, @Admin_County, @Admin_State, @Admin_Zip, @Admin_Suffix, @Comorbidity_Sta" +
                "tus, @Serology_Results, @PPRL);\r\nSELECT Extract_Type, Vaccine_Event_Id, Administ" +
                "ration_Date, Vaccine_Type, Vaccine_Product, Vaccine_Manufacturer, Lot_Number, Va" +
                "ccine_Experation_Date, Vaccine_Admin_Site, Vaccine_Admin_Route, Dose_Number, Vac" +
                "cine_Series_Complete, Responsible_Organization, Administrated_Location, Vtcks_Pi" +
                "n, Administered_Loc_Type, Admin_Street_Address, Admin_City, Admin_County, Admin_" +
                "State, Admin_Zip, Admin_Suffix, Comorbidity_Status, Serology_Results, PPRL FROM " +
                "Vaccine_Records WHERE (Vaccine_Event_Id = @Vaccine_Event_Id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Extract_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Extract_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Event_Id", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Event_Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administration_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administration_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Product", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Product", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Manufacturer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Manufacturer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lot_Number", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lot_Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Experation_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Experation_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Admin_Site", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Site", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Admin_Route", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Route", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dose_Number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dose_Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Series_Complete", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Series_Complete", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Responsible_Organization", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Responsible_Organization", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administrated_Location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administrated_Location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vtcks_Pin", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vtcks_Pin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administered_Loc_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administered_Loc_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Street_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Street_Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_County", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_County", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Zip", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Suffix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Suffix", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comorbidity_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comorbidity_Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Serology_Results", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Serology_Results", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPRL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPRL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Vaccine_Records] SET [Extract_Type] = @Extract_Type, [Vaccine_Event" +
                "_Id] = @Vaccine_Event_Id, [Administration_Date] = @Administration_Date, [Vaccine" +
                "_Type] = @Vaccine_Type, [Vaccine_Product] = @Vaccine_Product, [Vaccine_Manufactu" +
                "rer] = @Vaccine_Manufacturer, [Lot_Number] = @Lot_Number, [Vaccine_Experation_Da" +
                "te] = @Vaccine_Experation_Date, [Vaccine_Admin_Site] = @Vaccine_Admin_Site, [Vac" +
                "cine_Admin_Route] = @Vaccine_Admin_Route, [Dose_Number] = @Dose_Number, [Vaccine" +
                "_Series_Complete] = @Vaccine_Series_Complete, [Responsible_Organization] = @Resp" +
                "onsible_Organization, [Administrated_Location] = @Administrated_Location, [Vtcks" +
                "_Pin] = @Vtcks_Pin, [Administered_Loc_Type] = @Administered_Loc_Type, [Admin_Str" +
                "eet_Address] = @Admin_Street_Address, [Admin_City] = @Admin_City, [Admin_County]" +
                " = @Admin_County, [Admin_State] = @Admin_State, [Admin_Zip] = @Admin_Zip, [Admin" +
                "_Suffix] = @Admin_Suffix, [Comorbidity_Status] = @Comorbidity_Status, [Serology_" +
                "Results] = @Serology_Results, [PPRL] = @PPRL WHERE (([Extract_Type] = @Original_" +
                "Extract_Type) AND ([Vaccine_Event_Id] = @Original_Vaccine_Event_Id) AND ([Admini" +
                "stration_Date] = @Original_Administration_Date) AND ([Vaccine_Type] = @Original_" +
                "Vaccine_Type) AND ([Vaccine_Product] = @Original_Vaccine_Product) AND ([Vaccine_" +
                "Manufacturer] = @Original_Vaccine_Manufacturer) AND ([Lot_Number] = @Original_Lo" +
                "t_Number) AND ([Vaccine_Experation_Date] = @Original_Vaccine_Experation_Date) AN" +
                "D ([Vaccine_Admin_Site] = @Original_Vaccine_Admin_Site) AND ([Vaccine_Admin_Rout" +
                "e] = @Original_Vaccine_Admin_Route) AND ([Dose_Number] = @Original_Dose_Number) " +
                "AND ([Vaccine_Series_Complete] = @Original_Vaccine_Series_Complete) AND ([Respon" +
                "sible_Organization] = @Original_Responsible_Organization) AND ([Administrated_Lo" +
                "cation] = @Original_Administrated_Location) AND ([Vtcks_Pin] = @Original_Vtcks_P" +
                "in) AND ([Administered_Loc_Type] = @Original_Administered_Loc_Type) AND ([Admin_" +
                "Street_Address] = @Original_Admin_Street_Address) AND ([Admin_City] = @Original_" +
                "Admin_City) AND ([Admin_County] = @Original_Admin_County) AND ([Admin_State] = @" +
                "Original_Admin_State) AND ([Admin_Zip] = @Original_Admin_Zip) AND ([Admin_Suffix" +
                "] = @Original_Admin_Suffix) AND ([Comorbidity_Status] = @Original_Comorbidity_St" +
                "atus) AND ([Serology_Results] = @Original_Serology_Results) AND ([PPRL] = @Origi" +
                "nal_PPRL));\r\nSELECT Extract_Type, Vaccine_Event_Id, Administration_Date, Vaccine" +
                "_Type, Vaccine_Product, Vaccine_Manufacturer, Lot_Number, Vaccine_Experation_Dat" +
                "e, Vaccine_Admin_Site, Vaccine_Admin_Route, Dose_Number, Vaccine_Series_Complete" +
                ", Responsible_Organization, Administrated_Location, Vtcks_Pin, Administered_Loc_" +
                "Type, Admin_Street_Address, Admin_City, Admin_County, Admin_State, Admin_Zip, Ad" +
                "min_Suffix, Comorbidity_Status, Serology_Results, PPRL FROM Vaccine_Records WHER" +
                "E (Vaccine_Event_Id = @Vaccine_Event_Id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Extract_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Extract_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Event_Id", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Event_Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administration_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administration_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Product", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Product", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Manufacturer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Manufacturer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lot_Number", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lot_Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Experation_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Experation_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Admin_Site", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Site", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Admin_Route", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Route", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dose_Number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dose_Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vaccine_Series_Complete", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Series_Complete", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Responsible_Organization", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Responsible_Organization", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administrated_Location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administrated_Location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vtcks_Pin", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vtcks_Pin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Administered_Loc_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administered_Loc_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Street_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Street_Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_County", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_County", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Zip", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Zip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Admin_Suffix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Suffix", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comorbidity_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comorbidity_Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Serology_Results", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Serology_Results", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPRL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPRL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Extract_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Extract_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Event_Id", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Event_Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administration_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administration_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Product", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Product", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Manufacturer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Manufacturer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lot_Number", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lot_Number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Experation_Date", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Experation_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Admin_Site", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Site", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Admin_Route", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Admin_Route", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dose_Number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dose_Number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vaccine_Series_Complete", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vaccine_Series_Complete", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Responsible_Organization", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Responsible_Organization", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administrated_Location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administrated_Location", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Vtcks_Pin", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Vtcks_Pin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Administered_Loc_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Administered_Loc_Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Street_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Street_Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_County", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_County", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Zip", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Zip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Admin_Suffix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Admin_Suffix", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comorbidity_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comorbidity_Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Serology_Results", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Serology_Results", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PPRL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPRL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Covid_Vaccine_Tracker.Properties.Settings.Default.NewConnection;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Extract_Type, Vaccine_Event_Id, Administration_Date, Vaccine_Type, Vaccine_Product, Vaccine_Manufacturer, Lot_Number, Vaccine_Experation_Date, Vaccine_Admin_Site, Vaccine_Admin_Route, Dose_Number, Vaccine_Series_Complete, Responsible_Organization, Administrated_Location, Vtcks_Pin, Administered_Loc_Type, Admin_Street_Address, Admin_City, Admin_County, Admin_State, Admin_Zip, Admin_Suffix, Comorbidity_Status, Serology_Results, PPRL FROM dbo.Vaccine_Records";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NewDataSet.Vaccine_RecordsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NewDataSet.Vaccine_RecordsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NewDataSet.Vaccine_RecordsDataTable dataTable = new NewDataSet.Vaccine_RecordsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NewDataSet.Vaccine_RecordsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NewDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Vaccine_Records");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_Extract_Type, 
                    string Original_Vaccine_Event_Id, 
                    System.DateTime Original_Administration_Date, 
                    string Original_Vaccine_Type, 
                    string Original_Vaccine_Product, 
                    string Original_Vaccine_Manufacturer, 
                    string Original_Lot_Number, 
                    System.DateTime Original_Vaccine_Experation_Date, 
                    string Original_Vaccine_Admin_Site, 
                    string Original_Vaccine_Admin_Route, 
                    int Original_Dose_Number, 
                    string Original_Vaccine_Series_Complete, 
                    string Original_Responsible_Organization, 
                    string Original_Administrated_Location, 
                    string Original_Vtcks_Pin, 
                    string Original_Administered_Loc_Type, 
                    string Original_Admin_Street_Address, 
                    string Original_Admin_City, 
                    string Original_Admin_County, 
                    string Original_Admin_State, 
                    string Original_Admin_Zip, 
                    string Original_Admin_Suffix, 
                    string Original_Comorbidity_Status, 
                    string Original_Serology_Results, 
                    string Original_PPRL) {
            if ((Original_Extract_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Extract_Type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Extract_Type));
            }
            if ((Original_Vaccine_Event_Id == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Event_Id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Vaccine_Event_Id));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_Administration_Date));
            if ((Original_Vaccine_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Vaccine_Type));
            }
            if ((Original_Vaccine_Product == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Product");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Vaccine_Product));
            }
            if ((Original_Vaccine_Manufacturer == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Manufacturer");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Vaccine_Manufacturer));
            }
            if ((Original_Lot_Number == null)) {
                throw new global::System.ArgumentNullException("Original_Lot_Number");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Lot_Number));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_Vaccine_Experation_Date));
            if ((Original_Vaccine_Admin_Site == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Admin_Site");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Vaccine_Admin_Site));
            }
            if ((Original_Vaccine_Admin_Route == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Admin_Route");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Vaccine_Admin_Route));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Dose_Number));
            if ((Original_Vaccine_Series_Complete == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Series_Complete");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Vaccine_Series_Complete));
            }
            if ((Original_Responsible_Organization == null)) {
                throw new global::System.ArgumentNullException("Original_Responsible_Organization");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Responsible_Organization));
            }
            if ((Original_Administrated_Location == null)) {
                throw new global::System.ArgumentNullException("Original_Administrated_Location");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Administrated_Location));
            }
            if ((Original_Vtcks_Pin == null)) {
                throw new global::System.ArgumentNullException("Original_Vtcks_Pin");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Vtcks_Pin));
            }
            if ((Original_Administered_Loc_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Administered_Loc_Type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Administered_Loc_Type));
            }
            if ((Original_Admin_Street_Address == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Street_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Admin_Street_Address));
            }
            if ((Original_Admin_City == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_City");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Admin_City));
            }
            if ((Original_Admin_County == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_County");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Admin_County));
            }
            if ((Original_Admin_State == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_State");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_Admin_State));
            }
            if ((Original_Admin_Zip == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Zip");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Admin_Zip));
            }
            if ((Original_Admin_Suffix == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Suffix");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_Admin_Suffix));
            }
            if ((Original_Comorbidity_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Comorbidity_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Comorbidity_Status));
            }
            if ((Original_Serology_Results == null)) {
                throw new global::System.ArgumentNullException("Original_Serology_Results");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_Serology_Results));
            }
            if ((Original_PPRL == null)) {
                throw new global::System.ArgumentNullException("Original_PPRL");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_PPRL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Extract_Type, 
                    string Vaccine_Event_Id, 
                    System.DateTime Administration_Date, 
                    string Vaccine_Type, 
                    string Vaccine_Product, 
                    string Vaccine_Manufacturer, 
                    string Lot_Number, 
                    System.DateTime Vaccine_Experation_Date, 
                    string Vaccine_Admin_Site, 
                    string Vaccine_Admin_Route, 
                    int Dose_Number, 
                    string Vaccine_Series_Complete, 
                    string Responsible_Organization, 
                    string Administrated_Location, 
                    string Vtcks_Pin, 
                    string Administered_Loc_Type, 
                    string Admin_Street_Address, 
                    string Admin_City, 
                    string Admin_County, 
                    string Admin_State, 
                    string Admin_Zip, 
                    string Admin_Suffix, 
                    string Comorbidity_Status, 
                    string Serology_Results, 
                    string PPRL) {
            if ((Extract_Type == null)) {
                throw new global::System.ArgumentNullException("Extract_Type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Extract_Type));
            }
            if ((Vaccine_Event_Id == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Event_Id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Vaccine_Event_Id));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Administration_Date));
            if ((Vaccine_Type == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Vaccine_Type));
            }
            if ((Vaccine_Product == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Product");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Vaccine_Product));
            }
            if ((Vaccine_Manufacturer == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Manufacturer");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Vaccine_Manufacturer));
            }
            if ((Lot_Number == null)) {
                throw new global::System.ArgumentNullException("Lot_Number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Lot_Number));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(Vaccine_Experation_Date));
            if ((Vaccine_Admin_Site == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Admin_Site");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Vaccine_Admin_Site));
            }
            if ((Vaccine_Admin_Route == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Admin_Route");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Vaccine_Admin_Route));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Dose_Number));
            if ((Vaccine_Series_Complete == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Series_Complete");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Vaccine_Series_Complete));
            }
            if ((Responsible_Organization == null)) {
                throw new global::System.ArgumentNullException("Responsible_Organization");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Responsible_Organization));
            }
            if ((Administrated_Location == null)) {
                throw new global::System.ArgumentNullException("Administrated_Location");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Administrated_Location));
            }
            if ((Vtcks_Pin == null)) {
                throw new global::System.ArgumentNullException("Vtcks_Pin");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Vtcks_Pin));
            }
            if ((Administered_Loc_Type == null)) {
                throw new global::System.ArgumentNullException("Administered_Loc_Type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Administered_Loc_Type));
            }
            if ((Admin_Street_Address == null)) {
                throw new global::System.ArgumentNullException("Admin_Street_Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Admin_Street_Address));
            }
            if ((Admin_City == null)) {
                throw new global::System.ArgumentNullException("Admin_City");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Admin_City));
            }
            if ((Admin_County == null)) {
                throw new global::System.ArgumentNullException("Admin_County");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Admin_County));
            }
            if ((Admin_State == null)) {
                throw new global::System.ArgumentNullException("Admin_State");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Admin_State));
            }
            if ((Admin_Zip == null)) {
                throw new global::System.ArgumentNullException("Admin_Zip");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Admin_Zip));
            }
            if ((Admin_Suffix == null)) {
                throw new global::System.ArgumentNullException("Admin_Suffix");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Admin_Suffix));
            }
            if ((Comorbidity_Status == null)) {
                throw new global::System.ArgumentNullException("Comorbidity_Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Comorbidity_Status));
            }
            if ((Serology_Results == null)) {
                throw new global::System.ArgumentNullException("Serology_Results");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Serology_Results));
            }
            if ((PPRL == null)) {
                throw new global::System.ArgumentNullException("PPRL");
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(PPRL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Extract_Type, 
                    string Vaccine_Event_Id, 
                    System.DateTime Administration_Date, 
                    string Vaccine_Type, 
                    string Vaccine_Product, 
                    string Vaccine_Manufacturer, 
                    string Lot_Number, 
                    System.DateTime Vaccine_Experation_Date, 
                    string Vaccine_Admin_Site, 
                    string Vaccine_Admin_Route, 
                    int Dose_Number, 
                    string Vaccine_Series_Complete, 
                    string Responsible_Organization, 
                    string Administrated_Location, 
                    string Vtcks_Pin, 
                    string Administered_Loc_Type, 
                    string Admin_Street_Address, 
                    string Admin_City, 
                    string Admin_County, 
                    string Admin_State, 
                    string Admin_Zip, 
                    string Admin_Suffix, 
                    string Comorbidity_Status, 
                    string Serology_Results, 
                    string PPRL, 
                    string Original_Extract_Type, 
                    string Original_Vaccine_Event_Id, 
                    System.DateTime Original_Administration_Date, 
                    string Original_Vaccine_Type, 
                    string Original_Vaccine_Product, 
                    string Original_Vaccine_Manufacturer, 
                    string Original_Lot_Number, 
                    System.DateTime Original_Vaccine_Experation_Date, 
                    string Original_Vaccine_Admin_Site, 
                    string Original_Vaccine_Admin_Route, 
                    int Original_Dose_Number, 
                    string Original_Vaccine_Series_Complete, 
                    string Original_Responsible_Organization, 
                    string Original_Administrated_Location, 
                    string Original_Vtcks_Pin, 
                    string Original_Administered_Loc_Type, 
                    string Original_Admin_Street_Address, 
                    string Original_Admin_City, 
                    string Original_Admin_County, 
                    string Original_Admin_State, 
                    string Original_Admin_Zip, 
                    string Original_Admin_Suffix, 
                    string Original_Comorbidity_Status, 
                    string Original_Serology_Results, 
                    string Original_PPRL) {
            if ((Extract_Type == null)) {
                throw new global::System.ArgumentNullException("Extract_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Extract_Type));
            }
            if ((Vaccine_Event_Id == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Event_Id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Vaccine_Event_Id));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Administration_Date));
            if ((Vaccine_Type == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Vaccine_Type));
            }
            if ((Vaccine_Product == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Product");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Vaccine_Product));
            }
            if ((Vaccine_Manufacturer == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Manufacturer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Vaccine_Manufacturer));
            }
            if ((Lot_Number == null)) {
                throw new global::System.ArgumentNullException("Lot_Number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Lot_Number));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Vaccine_Experation_Date));
            if ((Vaccine_Admin_Site == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Admin_Site");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Vaccine_Admin_Site));
            }
            if ((Vaccine_Admin_Route == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Admin_Route");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Vaccine_Admin_Route));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Dose_Number));
            if ((Vaccine_Series_Complete == null)) {
                throw new global::System.ArgumentNullException("Vaccine_Series_Complete");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Vaccine_Series_Complete));
            }
            if ((Responsible_Organization == null)) {
                throw new global::System.ArgumentNullException("Responsible_Organization");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Responsible_Organization));
            }
            if ((Administrated_Location == null)) {
                throw new global::System.ArgumentNullException("Administrated_Location");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Administrated_Location));
            }
            if ((Vtcks_Pin == null)) {
                throw new global::System.ArgumentNullException("Vtcks_Pin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Vtcks_Pin));
            }
            if ((Administered_Loc_Type == null)) {
                throw new global::System.ArgumentNullException("Administered_Loc_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Administered_Loc_Type));
            }
            if ((Admin_Street_Address == null)) {
                throw new global::System.ArgumentNullException("Admin_Street_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Admin_Street_Address));
            }
            if ((Admin_City == null)) {
                throw new global::System.ArgumentNullException("Admin_City");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Admin_City));
            }
            if ((Admin_County == null)) {
                throw new global::System.ArgumentNullException("Admin_County");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Admin_County));
            }
            if ((Admin_State == null)) {
                throw new global::System.ArgumentNullException("Admin_State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Admin_State));
            }
            if ((Admin_Zip == null)) {
                throw new global::System.ArgumentNullException("Admin_Zip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Admin_Zip));
            }
            if ((Admin_Suffix == null)) {
                throw new global::System.ArgumentNullException("Admin_Suffix");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Admin_Suffix));
            }
            if ((Comorbidity_Status == null)) {
                throw new global::System.ArgumentNullException("Comorbidity_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Comorbidity_Status));
            }
            if ((Serology_Results == null)) {
                throw new global::System.ArgumentNullException("Serology_Results");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Serology_Results));
            }
            if ((PPRL == null)) {
                throw new global::System.ArgumentNullException("PPRL");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(PPRL));
            }
            if ((Original_Extract_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Extract_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Extract_Type));
            }
            if ((Original_Vaccine_Event_Id == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Event_Id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_Vaccine_Event_Id));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_Administration_Date));
            if ((Original_Vaccine_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Vaccine_Type));
            }
            if ((Original_Vaccine_Product == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Product");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Vaccine_Product));
            }
            if ((Original_Vaccine_Manufacturer == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Manufacturer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Vaccine_Manufacturer));
            }
            if ((Original_Lot_Number == null)) {
                throw new global::System.ArgumentNullException("Original_Lot_Number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Lot_Number));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_Vaccine_Experation_Date));
            if ((Original_Vaccine_Admin_Site == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Admin_Site");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Vaccine_Admin_Site));
            }
            if ((Original_Vaccine_Admin_Route == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Admin_Route");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Vaccine_Admin_Route));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_Dose_Number));
            if ((Original_Vaccine_Series_Complete == null)) {
                throw new global::System.ArgumentNullException("Original_Vaccine_Series_Complete");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Vaccine_Series_Complete));
            }
            if ((Original_Responsible_Organization == null)) {
                throw new global::System.ArgumentNullException("Original_Responsible_Organization");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_Responsible_Organization));
            }
            if ((Original_Administrated_Location == null)) {
                throw new global::System.ArgumentNullException("Original_Administrated_Location");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_Administrated_Location));
            }
            if ((Original_Vtcks_Pin == null)) {
                throw new global::System.ArgumentNullException("Original_Vtcks_Pin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_Vtcks_Pin));
            }
            if ((Original_Administered_Loc_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Administered_Loc_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_Administered_Loc_Type));
            }
            if ((Original_Admin_Street_Address == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Street_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_Admin_Street_Address));
            }
            if ((Original_Admin_City == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_City");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_Admin_City));
            }
            if ((Original_Admin_County == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_County");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_Admin_County));
            }
            if ((Original_Admin_State == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Admin_State));
            }
            if ((Original_Admin_Zip == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Zip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_Admin_Zip));
            }
            if ((Original_Admin_Suffix == null)) {
                throw new global::System.ArgumentNullException("Original_Admin_Suffix");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_Admin_Suffix));
            }
            if ((Original_Comorbidity_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Comorbidity_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_Comorbidity_Status));
            }
            if ((Original_Serology_Results == null)) {
                throw new global::System.ArgumentNullException("Original_Serology_Results");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_Serology_Results));
            }
            if ((Original_PPRL == null)) {
                throw new global::System.ArgumentNullException("Original_PPRL");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_PPRL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Extract_Type, 
                    System.DateTime Administration_Date, 
                    string Vaccine_Type, 
                    string Vaccine_Product, 
                    string Vaccine_Manufacturer, 
                    string Lot_Number, 
                    System.DateTime Vaccine_Experation_Date, 
                    string Vaccine_Admin_Site, 
                    string Vaccine_Admin_Route, 
                    int Dose_Number, 
                    string Vaccine_Series_Complete, 
                    string Responsible_Organization, 
                    string Administrated_Location, 
                    string Vtcks_Pin, 
                    string Administered_Loc_Type, 
                    string Admin_Street_Address, 
                    string Admin_City, 
                    string Admin_County, 
                    string Admin_State, 
                    string Admin_Zip, 
                    string Admin_Suffix, 
                    string Comorbidity_Status, 
                    string Serology_Results, 
                    string PPRL, 
                    string Original_Extract_Type, 
                    string Original_Vaccine_Event_Id, 
                    System.DateTime Original_Administration_Date, 
                    string Original_Vaccine_Type, 
                    string Original_Vaccine_Product, 
                    string Original_Vaccine_Manufacturer, 
                    string Original_Lot_Number, 
                    System.DateTime Original_Vaccine_Experation_Date, 
                    string Original_Vaccine_Admin_Site, 
                    string Original_Vaccine_Admin_Route, 
                    int Original_Dose_Number, 
                    string Original_Vaccine_Series_Complete, 
                    string Original_Responsible_Organization, 
                    string Original_Administrated_Location, 
                    string Original_Vtcks_Pin, 
                    string Original_Administered_Loc_Type, 
                    string Original_Admin_Street_Address, 
                    string Original_Admin_City, 
                    string Original_Admin_County, 
                    string Original_Admin_State, 
                    string Original_Admin_Zip, 
                    string Original_Admin_Suffix, 
                    string Original_Comorbidity_Status, 
                    string Original_Serology_Results, 
                    string Original_PPRL) {
            return this.Update(Extract_Type, Original_Vaccine_Event_Id, Administration_Date, Vaccine_Type, Vaccine_Product, Vaccine_Manufacturer, Lot_Number, Vaccine_Experation_Date, Vaccine_Admin_Site, Vaccine_Admin_Route, Dose_Number, Vaccine_Series_Complete, Responsible_Organization, Administrated_Location, Vtcks_Pin, Administered_Loc_Type, Admin_Street_Address, Admin_City, Admin_County, Admin_State, Admin_Zip, Admin_Suffix, Comorbidity_Status, Serology_Results, PPRL, Original_Extract_Type, Original_Vaccine_Event_Id, Original_Administration_Date, Original_Vaccine_Type, Original_Vaccine_Product, Original_Vaccine_Manufacturer, Original_Lot_Number, Original_Vaccine_Experation_Date, Original_Vaccine_Admin_Site, Original_Vaccine_Admin_Route, Original_Dose_Number, Original_Vaccine_Series_Complete, Original_Responsible_Organization, Original_Administrated_Location, Original_Vtcks_Pin, Original_Administered_Loc_Type, Original_Admin_Street_Address, Original_Admin_City, Original_Admin_County, Original_Admin_State, Original_Admin_Zip, Original_Admin_Suffix, Original_Comorbidity_Status, Original_Serology_Results, Original_PPRL);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Vaccine_RecordsTableAdapter _vaccine_RecordsTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Vaccine_RecordsTableAdapter Vaccine_RecordsTableAdapter {
            get {
                return this._vaccine_RecordsTableAdapter;
            }
            set {
                this._vaccine_RecordsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._vaccine_RecordsTableAdapter != null) 
                            && (this._vaccine_RecordsTableAdapter.Connection != null))) {
                    return this._vaccine_RecordsTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._vaccine_RecordsTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(NewDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._vaccine_RecordsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Vaccine_Records.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._vaccine_RecordsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(NewDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._vaccine_RecordsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Vaccine_Records.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._vaccine_RecordsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(NewDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._vaccine_RecordsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Vaccine_Records.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._vaccine_RecordsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(NewDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._vaccine_RecordsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._vaccine_RecordsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._vaccine_RecordsTableAdapter != null)) {
                    revertConnections.Add(this._vaccine_RecordsTableAdapter, this._vaccine_RecordsTableAdapter.Connection);
                    this._vaccine_RecordsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._vaccine_RecordsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._vaccine_RecordsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._vaccine_RecordsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._vaccine_RecordsTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._vaccine_RecordsTableAdapter != null)) {
                    this._vaccine_RecordsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._vaccine_RecordsTableAdapter]));
                    this._vaccine_RecordsTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591